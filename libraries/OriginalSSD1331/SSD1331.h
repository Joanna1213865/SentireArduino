/*
* SSD1331.h
* A customised library for Adafruit 0.96" RGB OLED module
* in working with Xadow Wearable Kit for Intel Edison
*
* This library is based on Adafruit's SSD1331-OLED-Driver-Library and
* and Seeed Studio's SSD1331 library, some ajustments were made in order
* to make the display module work with Xadow Edison Kit.
* A few functions were added for creating simple light patterns.
*/

#ifndef _SSD1331_H_
#define _SSD1331_H_

#include "arduino.h"
#include <iostream>
#include <vector>

// Screen Size
#define RGB_OLED_WIDTH                      96
#define RGB_OLED_HEIGHT                     64

// Timing Delays
#define SSD1331_DELAYS_HWFILL				(3)
#define SSD1331_DELAYS_HWLINE				(1)

// SSD1331 Commands
#define SSD1331_CMD_DRAWLINE 				0x21
#define SSD1331_CMD_DRAWRECT 				0x22
#define SSD1331_CMD_FILL 					0x26
#define SSD1331_CMD_SETCOLUMN 				0x15
#define SSD1331_CMD_SETROW    				0x75
#define SSD1331_CMD_CONTRASTA 				0x81
#define SSD1331_CMD_CONTRASTB 				0x82
#define SSD1331_CMD_CONTRASTC				0x83
#define SSD1331_CMD_MASTERCURRENT 			0x87
#define SSD1331_CMD_SETREMAP 				0xA0
#define SSD1331_CMD_STARTLINE 				0xA1
#define SSD1331_CMD_DISPLAYOFFSET 			0xA2
#define SSD1331_CMD_NORMALDISPLAY 			0xA4
#define SSD1331_CMD_DISPLAYALLON  			0xA5
#define SSD1331_CMD_DISPLAYALLOFF 			0xA6
#define SSD1331_CMD_INVERTDISPLAY 			0xA7
#define SSD1331_CMD_SETMULTIPLEX  			0xA8
#define SSD1331_CMD_SETMASTER 				0xAD
#define SSD1331_CMD_DISPLAYOFF 				0xAE
#define SSD1331_CMD_DISPLAYON     			0xAF
#define SSD1331_CMD_POWERMODE 				0xB0
#define SSD1331_CMD_PRECHARGE 				0xB1
#define SSD1331_CMD_CLOCKDIV 				0xB3
#define SSD1331_CMD_PRECHARGEA 				0x8A
#define SSD1331_CMD_PRECHARGEB 				0x8B
#define SSD1331_CMD_PRECHARGEC 				0x8C
#define SSD1331_CMD_PRECHARGELEVEL 			0xBB
#define SSD1331_CMD_VCOMH 					0xBE

#define CMD_DRAW_LINE                       0x21
#define CMD_DRAW_RECTANGLE                  0x22
#define CMD_COPY_WINDOW                     0x23
#define CMD_DIM_WINDOW                      0x24
#define CMD_CLEAR_WINDOW                    0x25
#define CMD_FILL_WINDOW                     0x26
#define DISABLE_FILL    0x00
#define ENABLE_FILL     0x01
#define CMD_CONTINUOUS_SCROLLING_SETUP      0x27
#define CMD_DEACTIVE_SCROLLING              0x2E
#define CMD_ACTIVE_SCROLLING                0x2F

#define CMD_SET_COLUMN_ADDRESS              0x15
#define CMD_SET_ROW_ADDRESS                 0x75
#define CMD_SET_CONTRAST_A                  0x81
#define CMD_SET_CONTRAST_B                  0x82
#define CMD_SET_CONTRAST_C                  0x83
#define CMD_MASTER_CURRENT_CONTROL          0x87
#define CMD_SET_PRECHARGE_SPEED_A           0x8A
#define CMD_SET_PRECHARGE_SPEED_B           0x8B
#define CMD_SET_PRECHARGE_SPEED_C           0x8C
#define CMD_SET_REMAP                       0xA0
#define CMD_SET_DISPLAY_START_LINE          0xA1
#define CMD_SET_DISPLAY_OFFSET              0xA2
#define CMD_NORMAL_DISPLAY                  0xA4
#define CMD_ENTIRE_DISPLAY_ON               0xA5
#define CMD_ENTIRE_DISPLAY_OFF              0xA6
#define CMD_INVERSE_DISPLAY                 0xA7
#define CMD_SET_MULTIPLEX_RATIO             0xA8
#define CMD_DIM_MODE_SETTING                0xAB
#define CMD_SET_MASTER_CONFIGURE            0xAD
#define CMD_DIM_MODE_DISPLAY_ON             0xAC
#define CMD_DISPLAY_OFF                     0xAE
#define CMD_NORMAL_BRIGHTNESS_DISPLAY_ON    0xAF
#define CMD_POWER_SAVE_MODE                 0xB0
#define CMD_PHASE_PERIOD_ADJUSTMENT         0xB1
#define CMD_DISPLAY_CLOCK_DIV               0xB3
#define CMD_SET_GRAy_SCALE_TABLE            0xB8
#define CMD_ENABLE_LINEAR_GRAY_SCALE_TABLE  0xB9
#define CMD_SET_PRECHARGE_VOLTAGE           0xBB
#define CMD_SET_V_VOLTAGE                   0xBE

#define RGB(R,G,B)                  (((R>>3)<<11) | ((G>>2)<<5) | (B>>3))
enum Color {
	COLOR_BLACK = RGB(0, 0, 0), // black
	COLOR_GREY = RGB(192, 192, 192), // grey
	COLOR_WHITE = RGB(255, 255, 255), // white
	COLOR_RED = RGB(255, 0, 0), // red
	COLOR_PINK = RGB(255, 192, 203), // pink
	COLOR_YELLOW = RGB(255, 255, 0), // yellow
	COLOR_GOLDEN = RGB(255, 215, 0), // golden
	COLOR_BROWN = RGB(128, 42, 42), // brown
	COLOR_BLUE = RGB(0, 0, 255), // blue
	COLOR_CYAN = RGB(0, 255, 255), // cyan
	COLOR_GREEN = RGB(0, 255, 0), // green
	COLOR_PURPLE = RGB(160, 32, 240), // purple
};

enum DisplayMode {
	//reset the above effect and turn the data to ON at the corresponding gray level.
	NormalDisplay = 0xA4,
	//forces the entire display to be at "GS63"
	DisplayOn = 0xA5,
	//forces the entire display to be at gray level "GS0"
	DisplayOff = 0xA6,
	//swap the gray level of display data
	InverseDisplay = 0xA7
};

enum DisplayPower {
	DimMode = 0xAC,
	SleepMode = 0xAE,
	NormalMode = 0xAF
};

enum ScollingDirection {
	Horizontal = 0x00,
	Vertical = 0x01,
	Diagonal = 0x02
};

#define FONT_SPACE 6
#define FONT_X 8
#define FONT_Y 8

const unsigned char simpleFont[][8] PROGMEM =
{
	{ 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 },
	{ 0x00,0x00,0x5F,0x00,0x00,0x00,0x00,0x00 },
	{ 0x00,0x00,0x07,0x00,0x07,0x00,0x00,0x00 },
	{ 0x00,0x14,0x7F,0x14,0x7F,0x14,0x00,0x00 },
	{ 0x00,0x24,0x2A,0x7F,0x2A,0x12,0x00,0x00 },
	{ 0x00,0x23,0x13,0x08,0x64,0x62,0x00,0x00 },
	{ 0x00,0x36,0x49,0x55,0x22,0x50,0x00,0x00 },
	{ 0x00,0x00,0x05,0x03,0x00,0x00,0x00,0x00 },
	{ 0x00,0x1C,0x22,0x41,0x00,0x00,0x00,0x00 },
	{ 0x00,0x41,0x22,0x1C,0x00,0x00,0x00,0x00 },
	{ 0x00,0x08,0x2A,0x1C,0x2A,0x08,0x00,0x00 },
	{ 0x00,0x08,0x08,0x3E,0x08,0x08,0x00,0x00 },
	{ 0x00,0xA0,0x60,0x00,0x00,0x00,0x00,0x00 },
	{ 0x00,0x08,0x08,0x08,0x08,0x08,0x00,0x00 },
	{ 0x00,0x60,0x60,0x00,0x00,0x00,0x00,0x00 },
	{ 0x00,0x20,0x10,0x08,0x04,0x02,0x00,0x00 },
	{ 0x00,0x3E,0x51,0x49,0x45,0x3E,0x00,0x00 },
	{ 0x00,0x00,0x42,0x7F,0x40,0x00,0x00,0x00 },
	{ 0x00,0x62,0x51,0x49,0x49,0x46,0x00,0x00 },
	{ 0x00,0x22,0x41,0x49,0x49,0x36,0x00,0x00 },
	{ 0x00,0x18,0x14,0x12,0x7F,0x10,0x00,0x00 },
	{ 0x00,0x27,0x45,0x45,0x45,0x39,0x00,0x00 },
	{ 0x00,0x3C,0x4A,0x49,0x49,0x30,0x00,0x00 },
	{ 0x00,0x01,0x71,0x09,0x05,0x03,0x00,0x00 },
	{ 0x00,0x36,0x49,0x49,0x49,0x36,0x00,0x00 },
	{ 0x00,0x06,0x49,0x49,0x29,0x1E,0x00,0x00 },
	{ 0x00,0x00,0x36,0x36,0x00,0x00,0x00,0x00 },
	{ 0x00,0x00,0xAC,0x6C,0x00,0x00,0x00,0x00 },
	{ 0x00,0x08,0x14,0x22,0x41,0x00,0x00,0x00 },
	{ 0x00,0x14,0x14,0x14,0x14,0x14,0x00,0x00 },
	{ 0x00,0x41,0x22,0x14,0x08,0x00,0x00,0x00 },
	{ 0x00,0x02,0x01,0x51,0x09,0x06,0x00,0x00 },
	{ 0x00,0x32,0x49,0x79,0x41,0x3E,0x00,0x00 },
	{ 0x00,0x7E,0x09,0x09,0x09,0x7E,0x00,0x00 },
	{ 0x00,0x7F,0x49,0x49,0x49,0x36,0x00,0x00 },
	{ 0x00,0x3E,0x41,0x41,0x41,0x22,0x00,0x00 },
	{ 0x00,0x7F,0x41,0x41,0x22,0x1C,0x00,0x00 },
	{ 0x00,0x7F,0x49,0x49,0x49,0x41,0x00,0x00 },
	{ 0x00,0x7F,0x09,0x09,0x09,0x01,0x00,0x00 },
	{ 0x00,0x3E,0x41,0x41,0x51,0x72,0x00,0x00 },
	{ 0x00,0x7F,0x08,0x08,0x08,0x7F,0x00,0x00 },
	{ 0x00,0x41,0x7F,0x41,0x00,0x00,0x00,0x00 },
	{ 0x00,0x20,0x40,0x41,0x3F,0x01,0x00,0x00 },
	{ 0x00,0x7F,0x08,0x14,0x22,0x41,0x00,0x00 },
	{ 0x00,0x7F,0x40,0x40,0x40,0x40,0x00,0x00 },
	{ 0x00,0x7F,0x02,0x0C,0x02,0x7F,0x00,0x00 },
	{ 0x00,0x7F,0x04,0x08,0x10,0x7F,0x00,0x00 },
	{ 0x00,0x3E,0x41,0x41,0x41,0x3E,0x00,0x00 },
	{ 0x00,0x7F,0x09,0x09,0x09,0x06,0x00,0x00 },
	{ 0x00,0x3E,0x41,0x51,0x21,0x5E,0x00,0x00 },
	{ 0x00,0x7F,0x09,0x19,0x29,0x46,0x00,0x00 },
	{ 0x00,0x26,0x49,0x49,0x49,0x32,0x00,0x00 },
	{ 0x00,0x01,0x01,0x7F,0x01,0x01,0x00,0x00 },
	{ 0x00,0x3F,0x40,0x40,0x40,0x3F,0x00,0x00 },
	{ 0x00,0x1F,0x20,0x40,0x20,0x1F,0x00,0x00 },
	{ 0x00,0x3F,0x40,0x38,0x40,0x3F,0x00,0x00 },
	{ 0x00,0x63,0x14,0x08,0x14,0x63,0x00,0x00 },
	{ 0x00,0x03,0x04,0x78,0x04,0x03,0x00,0x00 },
	{ 0x00,0x61,0x51,0x49,0x45,0x43,0x00,0x00 },
	{ 0x00,0x7F,0x41,0x41,0x00,0x00,0x00,0x00 },
	{ 0x00,0x02,0x04,0x08,0x10,0x20,0x00,0x00 },
	{ 0x00,0x41,0x41,0x7F,0x00,0x00,0x00,0x00 },
	{ 0x00,0x04,0x02,0x01,0x02,0x04,0x00,0x00 },
	{ 0x00,0x80,0x80,0x80,0x80,0x80,0x00,0x00 },
	{ 0x00,0x01,0x02,0x04,0x00,0x00,0x00,0x00 },
	{ 0x00,0x20,0x54,0x54,0x54,0x78,0x00,0x00 },
	{ 0x00,0x7F,0x48,0x44,0x44,0x38,0x00,0x00 },
	{ 0x00,0x38,0x44,0x44,0x28,0x00,0x00,0x00 },
	{ 0x00,0x38,0x44,0x44,0x48,0x7F,0x00,0x00 },
	{ 0x00,0x38,0x54,0x54,0x54,0x18,0x00,0x00 },
	{ 0x00,0x08,0x7E,0x09,0x02,0x00,0x00,0x00 },
	{ 0x00,0x18,0xA4,0xA4,0xA4,0x7C,0x00,0x00 },
	{ 0x00,0x7F,0x08,0x04,0x04,0x78,0x00,0x00 },
	{ 0x00,0x00,0x7D,0x00,0x00,0x00,0x00,0x00 },
	{ 0x00,0x80,0x84,0x7D,0x00,0x00,0x00,0x00 },
	{ 0x00,0x7F,0x10,0x28,0x44,0x00,0x00,0x00 },
	{ 0x00,0x41,0x7F,0x40,0x00,0x00,0x00,0x00 },
	{ 0x00,0x7C,0x04,0x18,0x04,0x78,0x00,0x00 },
	{ 0x00,0x7C,0x08,0x04,0x7C,0x00,0x00,0x00 },
	{ 0x00,0x38,0x44,0x44,0x38,0x00,0x00,0x00 },
	{ 0x00,0xFC,0x24,0x24,0x18,0x00,0x00,0x00 },
	{ 0x00,0x18,0x24,0x24,0xFC,0x00,0x00,0x00 },
	{ 0x00,0x00,0x7C,0x08,0x04,0x00,0x00,0x00 },
	{ 0x00,0x48,0x54,0x54,0x24,0x00,0x00,0x00 },
	{ 0x00,0x04,0x7F,0x44,0x00,0x00,0x00,0x00 },
	{ 0x00,0x3C,0x40,0x40,0x7C,0x00,0x00,0x00 },
	{ 0x00,0x1C,0x20,0x40,0x20,0x1C,0x00,0x00 },
	{ 0x00,0x3C,0x40,0x30,0x40,0x3C,0x00,0x00 },
	{ 0x00,0x44,0x28,0x10,0x28,0x44,0x00,0x00 },
	{ 0x00,0x1C,0xA0,0xA0,0x7C,0x00,0x00,0x00 },
	{ 0x00,0x44,0x64,0x54,0x4C,0x44,0x00,0x00 },
	{ 0x00,0x08,0x36,0x41,0x00,0x00,0x00,0x00 },
	{ 0x00,0x00,0x7F,0x00,0x00,0x00,0x00,0x00 },
	{ 0x00,0x41,0x36,0x08,0x00,0x00,0x00,0x00 },
	{ 0x00,0x02,0x01,0x01,0x02,0x01,0x00,0x00 },
	{ 0x00,0x02,0x05,0x05,0x02,0x00,0x00,0x00 }
};

class SSD1331 {
public:
	// Basic
	SSD1331(uint8_t cs, uint8_t dc); // using hardware SPI
	SSD1331(uint8_t cs, uint8_t dc, uint8_t mosi, uint8_t sck);
	void init(void);
	void drawPixel(uint16_t x, uint16_t y, uint16_t color);
	void drawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);
	void drawFrame(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t outColor, uint16_t fillColor);
	void fillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t fillcolor);
	void copyWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
	void dimWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1);
	void clearWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1);
	void clearScreen(void);
	void setScolling(ScollingDirection direction, uint8_t rowAddr, uint8_t rowNum, uint8_t timeInterval);
	void enableScolling(bool enable);
	void setDisplayMode(DisplayMode mode);
	void setDisplayPower(DisplayPower power);
	void _sendCmd(uint8_t cmd);

	// High-level
	void drawChar(uint8_t ascii, uint16_t x, uint16_t y, uint16_t size, uint16_t color);
	void drawString(const char *string, uint16_t x, uint16_t y, uint16_t size, uint16_t color);
	void drawBitMap(uint16_t x, uint16_t y, const uint8_t *bitmap, uint16_t width, int16_t height, uint16_t color);
	void fillScreen(uint16_t color);
	void fullScreenFlash(uint16_t color1, uint16_t interval1, uint16_t color2, uint16_t interval2, uint16_t times);
	uint16_t getContrastYIQ(uint16_t color);
	void patternWithText(uint16_t color, const char* str);
	void patternWithTextAndFlash(uint16_t background_color, const char* text, uint16_t on_time, uint16_t off_time, uint16_t times);
	void patternWithTextAndFlash(uint16_t background_color, const char* text, uint8_t x, uint8_t y, uint8_t size, uint16_t on_time, uint16_t off_time, uint16_t times);
	void playSequencedColors(std::vector<int> & effects);
	void playSequencedColors(std::vector<int> & effects, const char* text);
	void playSequencedColors(std::vector<int> & effects, const char* text, uint8_t x, uint8_t y, uint8_t size);

private:
	uint16_t max(uint16_t x, uint16_t y);
	uint16_t min(uint16_t x, uint16_t y);

	void spiwrite(uint8_t);
	void swap(uint16_t* a, uint16_t* b) {
		uint16_t t = *a; *a = *b; *b = t;
	};

	uint8_t _cs, _dc, _mosi, _sck;
};

#endif
